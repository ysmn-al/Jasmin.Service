@page "/login"
@layout Jasmin.Service.Components.Layout.LoginLayout
@inject NavigationManager Navigation
@inject AuthenticationStateProviderService AuthenticationStateProviderService
@inject IAuthenticationService AuthenticationService
@using Jasmin.Common.Dto.Input
@using Microsoft.AspNetCore.Components.Authorization
@using Jasmin.Service.Services
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms


<section class="vh-100" style="background-color: rgba(0, 129, 184, 0.7);">
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col col-xl-10">
                <div class="card" style="border-radius: 1rem;">
                    <div class="row g-0">
                        <div class="col-md-6 col-lg-5 d-none d-md-block">
                            <img src="images/Emblem_MAI.webp" alt="login form" class="img-fluid" style="width: 300px; height: 300px; margin-top: 100px; margin-left: 60px;" />
                        </div>
                        <div class="col-md-6 col-lg-7 d-flex align-items-center">
                            <div class="card-body p-4 p-lg-5 text-black">

                                <EditForm Model="@model" OnValidSubmit="@HandleLogin" FormName="LoginForm">
                                    <div class="d-flex align-items-center mb-3 pb-1">
                                        <i class="fas fa-cubes fa-2x me-3" style="color: #0081b8;"></i>
                                        <span class="h1 fw-bold mb-0">Нагрузка кафедры 805</span>
                                    </div>

                                    <h5 class="fw-normal mb-3 pb-3" style="letter-spacing: 1px;">Введите логин и пароль для входа личный кабинет:</h5>

                                    @* <div data-mdb-input-init class="form-outline mb-4">
                                        <InputText id="form2Example17" @bind-Value="@model.Login" class="form-control form-control-lg" placeholder="Логин" required />
                                        <label class="form-label" for="form2Example17">Введите логин</label>
                                    </div>

                                    <div data-mdb-input-init class="form-outline mb-4">
                                        <InputText id="form2Example27" @bind-Value="@model.Password" type="password" class="form-control form-control-lg" placeholder="Пароль" required />
                                    </div> *@

                                    <div class="input-icon-wrapper mb-4">
                                        <img src="images/user-icon.png" alt="User Icon" class="input-icon" />
                                        <InputText id="form2Example17" @bind-Value="@model.Login" class="form-control form-control-lg" placeholder="Логин" required />
                                    </div>

                                    <div class="input-icon-wrapper mb-4">
                                        <img src="images/lock-icon.png" alt="Lock Icon" class="input-icon" />
                                        <InputText id="form2Example27" @bind-Value="@model.Password" type="password" class="form-control form-control-lg" placeholder="Пароль" required />
                                    </div>

                                    <div class="pt-1 mb-4">
                                        <button type="submit" class="btn btn-dark btn-lg btn-block" style="background-color: #0081b8; color: white;">Войти</button>
                                    </div>
                                </EditForm>

                                @if (!string.IsNullOrEmpty(loginMessage))
                                {
                                    <div class="alert alert-danger">@loginMessage</div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string loginMessage;
    private LoginDto model = new LoginDto();

    private async Task HandleLogin()
    {
        bool isValidUser = await AuthenticationService.ValidateUser(model);
        var current = await AuthenticationService.CurrentUser(model); // Получаем текущего пользователя

        if (isValidUser)
        {
            var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, model.Login),
            // new Claim(ClaimTypes.Name, current.Login),
            new Claim("Id",current.Id.ToString()),
            new Claim("Surname", current.Surname??string.Empty),
            new Claim("Name", current.Name??string.Empty),
            new Claim("Patronymic", current.Patronymic??string.Empty),
            new Claim("Post", ((int)current.Post).ToString())
        };
            var identity = new ClaimsIdentity(claims, "custom");
            var user = new ClaimsPrincipal(identity);

            // Используйте новый метод для уведомления об изменении состояния аутентификации
            //AuthenticationService.NotifyAuthenticationStateChanged(Task.FromResult(new AuthenticationState(user)));
            AuthenticationStateProviderService.NotifyAuthenticationStateChanged(user);
            Navigation.NavigateTo("/");
        }
        else
        {
            loginMessage = "Неверный логин или пароль.";
        }
    }
}

<style>
    .input-icon {
        position: absolute;
        left: 10px; /* Отступ от левого края */
        top: 50%;
        transform: translateY(-50%); /* Центрирование по вертикали */
        width: 25px; /* Ширина иконки */
        height: 25px; /* Высота иконки */
        object-fit: contain; /* Сохранение пропорций изображения */
    }

    .form-control {
        padding-left: 40px !important; /* Принудительное применение отступа */
    }
</style>