@page "/data"
@using Jasmin.Service.Services
@inject NavigationManager Navigation
@inject AuthenticationStateProviderService AuthenticationStateProviderService
@inject IApplicationService applicationService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<PageTitle>Data</PageTitle>

<h1>Загрузить файл Excel с данными по нагрузке</h1>

<InputFile OnChange="HandleSelection" />
<button @onclick="UploadFile" disabled="@(!isFileSelected)">Загрузить файл</button>
<button @onclick="DetachFile" disabled="@(!isFileSelected)">Отменить выбор файла</button>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
}

@code {
    private ClaimsPrincipal currentUser;
    private bool isFileSelected;
    private IBrowserFile selectedFile;
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProviderService.GetAuthenticationStateAsync();
        currentUser = authState.User;

        if (!currentUser.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private void HandleSelection(InputFileChangeEventArgs e)
    {
        // Получаем первый выбранный файл
        selectedFile = e.GetMultipleFiles(1).FirstOrDefault();
        isFileSelected = selectedFile != null;
        errorMessage = null;
        successMessage = null;
    }

    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            // Проверяем расширение файла
            var allowedExtensions = new[] { ".xls", ".xlsx" };
            var fileName = selectedFile.Name.ToLower();

            if (!allowedExtensions.Any(ext => fileName.EndsWith(ext)))
            {
                errorMessage = "Допустимые форматы файлов: .xls, .xlsx";
                return;
            }

            try
            {
                using (var stream = selectedFile.OpenReadStream())
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        byte[] fileBytes = memoryStream.ToArray();

                        // Вызов асинхронного метода для обработки файла
                        await applicationService.UploadFile(fileBytes);
                        successMessage = "Файл успешно загружен!";
                    }
                }
            }
            catch (HttpRequestException httpEx)
            {
                errorMessage = "Ошибка сети при загрузке файла: " + httpEx.Message;
            }
            catch (Exception ex)
            {
                errorMessage = "Ошибка при загрузке файла: " + ex.Message;
            }
        }
        else
        {
            errorMessage = "Пожалуйста, выберите файл перед загрузкой.";
        }
    }

    private void DetachFile()
    {
        // Сбрасываем выбранный файл
        selectedFile = null;
        isFileSelected = false;
        errorMessage = null;
        successMessage = null;
    }
}